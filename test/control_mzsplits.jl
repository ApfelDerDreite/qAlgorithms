using CSV
using DataFrames
using Statistics

cpp = CSV.read("./qbinning_binlist.csv", DataFrame)
cpp = select!(cpp, Not(:control_ID, :control_DQSB))

mdist_jl = mean_distances(cpp.mz)
mdist_cpp = [3.57794068060519e-05,
3.56945540883916e-05,
3.42360129960443e-05,
3.28061535387033e-05,
3.00693226284404e-05,
2.67107184454703e-05,
2.67107184506379e-05,
2.95463195450132e-05,
3.09746809999855e-05,
3.62851790007632e-05,
4.02883193621826e-05,
5.24503411944786e-05]

cpp_longd = [3.57794068060519e-05,
3.56945540870997e-05,
3.42360129973362e-05,
3.28061535438709e-05,
3.0069322633608e-05,
2.67107184506379e-05,
2.67107184519298e-05,
2.95463195437213e-05,
3.09746809974017e-05,
3.62851790007632e-05,
4.02883193608907e-05,
5.24503411931867e-05]

cpp_longd_fmal = [3.57794068112195e-05,
3.56945540948511e-05,
3.42360129947524e-05,
3.28061535438709e-05,
3.0069322633608e-05,
2.67107184532217e-05,
2.67107184519298e-05,
2.95463195463051e-05,
3.09746809974017e-05,
3.62851789981795e-05,
4.02883193557231e-05,
5.24503411918948e-05]

mdist_diff = (mdist_jl .- mdist_cpp) .* 100000

dqscheck = innerjoin(cpp, DF, on = :mz, makeunique = true)

matchDQS = findall(dqscheck.DQS .== dqscheck.DQSbin)

# meandist as implemented in julia
function mean_distances(sorted_array::Vector{Float64})::Vector{Float64}
    # This function calculates the mean distance from one point
    # in a data set to all other points. In total this process
    # is repeated for all the individual points.
    n = length(sorted_array)
    distances = zeros(n)
    for i in 1:n
        sum = 0.0
        for j in 1:n
            if i != j
                sum += abs(sorted_array[i] - sorted_array[j])
            end
        end
        distances[i] = sum / (n - 1) 
    return distances
end
end

### control at maxdist = 0
#mz as ordered by julia 
mz0_jl = [100.014897197396, 100.014947355816, 100.014866571885, 100.014871198788, 100.014918737361, 100.014933977592, 100.014866478547, 100.014899213561, 100.014878725073, 100.014868577379, 100.014928473274, 100.014914809367]
# vector "nnd" nearestNeighbourDistance used for DQS calculation in julia script
nnd0_jl = [13.560138040777005, 106.2052822941, 51.412186243094, 0.0013914364070046759, 0.001597724215002927, 49.739584709667014, 48.78341106018799, 17.149210033244003, 32.39518272513601, 27.893231952660997, 98.361695677859, 56.35522584699599]
# vector of MID in julia
MID0_jl = [2.6710718453221656e-5, 5.2450341188019095e-5, 3.5694554094851064e-5, 3.280615354387092e-5, 3.097468099998547e-5, 4.028831935959881e-5, 3.577940681121948e-5, 2.6710718453221656e-5, 3.0069322633607953e-5, 3.423601299604425e-5, 3.6285178998179454e-5, 2.954631954501317e-5]
# vector of DQS as calculated in julia
DQS0_jl = [0.9999856601253305, 0.9999735292887431, 0.9999818062313846, 0.9881953917013271, 0.9902914380427633, 0.9999794516756593, 0.9999817442328311, 0.9999858662442768, 0.9999845017029465, 0.9999822689030518, 0.9999816736277669, 0.9999849651408879]
#mz as ordered by c++
mz0_cpp = [100.014866478547,100.014866571885,100.014868577379,100.014871198788,100.014878725073,100.014897197396,100.014899213561,100.014914809367,100.014918737361,100.014928473274,100.014933977592,100.014947355816]
# minimum distance to a point outside the bin 
MOD0_cpp = [48.783411060188,51.412186243094,27.893231952661,0.00139143640700468,32.395182725136,13.560138040777,17.149210033244,100.014914809367,0.00159772421500293,98.361695677859,49.739584709667,106.2052822941]
# MID in C++
MID0_cpp = [3.57794068112195e-05,3.56945540948511e-05,3.42360129947524e-05,3.28061535438709e-05,3.0069322633608e-05,2.67107184532217e-05,2.67107184519298e-05,2.95463195463051e-05,3.09746809974017e-05,3.62851789981795e-05,4.02883193557231e-05,5.24503411918948e-05]
# DQS in C++
DQS0_cpp = [0.999981744232831,0.999981806231385,0.999982268903053,0.988195391701327,0.999984501702947,0.999985660125331,0.999985866244277,0.999985079571504,0.990291438043573,0.999981673627767,0.999979451675661,0.999973529288741]

### control at maxdist = 1
mz_jl = [100.014897197396, 100.014947355816, 100.014866571885, 100.014871198788, 100.014918737361, 100.014933977592, 100.014866478547, 100.014899213561, 100.014878725073, 100.014868577379, 100.014928473274, 100.014914809367]
nnd_jl = [67.542473935611, 25.584185983894997, 24.947272816196005, 0.0013914364070046759, 0.001597724215002927, 35.14064890440599, 24.947272909533993, 11.702656758721005, 0.001398962692007899, 0.0013888149980090247, 0.001607460127999616, 0.0015937962210017531]
MID_jl = [2.6710718453221656e-5, 5.2450341188019095e-5, 3.5694554094851064e-5, 3.280615354387092e-5, 3.097468099998547e-5, 4.028831935959881e-5, 3.577940681121948e-5, 2.6710718453221656e-5, 3.0069322633607953e-5, 3.423601299604425e-5, 3.6285178998179454e-5, 2.954631954501317e-5]
DQS_jl = [0.9999864472700247, 0.9999727512046765, 0.9999814379855925, 0.9881953917013271, 0.9902914380427633, 0.9999792834311398, 0.9999813938617497, 0.9999855038034243, 0.9892382823129119, 0.9876576841259375, 0.9886957733318367, 0.9907163363744446]

mz_cpp = [100.014866478547,100.014866571885,100.014868577379,100.014871198788,100.014878725073,100.014897197396,100.014899213561,100.014914809367,100.014918737361,100.014928473274,100.014933977592,100.014947355816]
MOD_cpp = [5.31573870006241e-05,30.164992564812,49.673271455434,0.000121987422005532,6.84875020056097e-05,21.533358512535,0.000109907527999553,11.702641162915,7.44488490056483e-05,35.140654408724,3.85995979996778e-05,21.533308354115]
MID_cpp = [3.57794068112195e-05,3.56945540948511e-05,3.42360129947524e-05,3.28061535438709e-05,3.0069322633608e-05,2.67107184532217e-05,2.67107184519298e-05,2.95463195463051e-05,3.09746809974017e-05,3.62851789981795e-05,4.02883193557231e-05,5.24503411918948e-05]
DQS_cpp = [0.663451962354957,0.999981561725821,0.999982537979311,0.865522696508858,0.780467406994636,0.999986024796866,0.878475382326686,0.999983964935745,0.791964362324607,0.99998134180261,0.479042891959192,0.999972558380134]

compDF_jl = DataFrame(mz = mz_jl, MOD_jl = nnd_jl, MID_jl = MID_jl, DQS_jl = DQS_jl)
compDF_cpp = DataFrame(mz = mz_cpp, MOD_cpp = MOD_cpp, MID_cpp = MID_cpp, DQS_cpp = DQS_cpp)

dqs_truediff = innerjoin(compDF_cpp, compDF_jl, on = :mz)

maximum(dqs_truediff.MOD_cpp - dqs_truediff.MOD_jl)



# meandist as implemented in c++

function dist_cpp(sorted_array::Vector{Float64})::Float64
    binsize = length(sorted_array)
    totalSum = 0.0
    output = zeros(binsize)
    for i in 1:binsize
        totalSum += sorted_array[i]
    end
    beforeSum = 0.0
    for i in 1:binsize
        v1 = totalSum - sorted_array[i] * (binsize - i + 1)
        v2 = sorted_array[i] * (i - 1) - beforeSum
        beforeSum += sorted_array[i]
        totalSum -= sorted_array[i]
        output[i] = (v1 + v2) / (binsize - 1)
    end
    return mean(output)
end

dist_cpp([1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0])
mean_distances([1.0,2.0,3.0,4.0])

dist_cpp(cpp.mz)
mean_distances(cpp.mz)


artbin = raw = CSV.read("../rawdata/artbin.csv", DataFrame)
sort!(artbin, :mz)
dist_cpp(artbin.mz[1:10])
dist_cpp(artbin.mz[12:21])
dist_cpp(artbin.mz[23:32])

