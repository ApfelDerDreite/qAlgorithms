1) m/z, RT etc. werden als vector<double> ausgegeben - Ausgabe sollte mehrere Schreibweisen, z.B. mz, m/z, RT, rt und andere gängige Versionen akzeptieren
2) Erste Zeile der csv-Datei wird separat in RawData eingelesen. csv muss mit den Spaltennamen anfangen
3) Input: Vektor von Vektoren, 1. Zeile enthält Namen
test.csv: muss mz als 1., RT als 2. spalte haben; es müssen für alle Spalten Werte vorliegen - setze auf nonsense-Wert, um Fehlzuweisungen zu vermeiden?
Parallelisieren: Im 1. Schritt des Binnings wird der Datensatz an allen Stellen mit nos > critval(5) gespalten und auf einen neuen thread gegeben

Gibt es einen Zusammenhang zwischen Zentroidfehler und der Eigenschaft, nicht in einem Bin zu landen / Anfang Bzw. Ende eines Bins zu sein?
Config-Datei

Füge den RawData vektor an den Bincontainer an

Wenn der Bin nach Teilen in RT/Scans genau so groß ist wie vorher, muss nicht erneut mit mz kontorolliert werden

Duplizierte Features crashen den code
https://www.agner.org/optimize/optimizing_cpp.pdf

pointer -> methode


massefehler für mehrere Featurelisten?

qGrouping

ßßß Intensitätsprofile

Kriterium für besseres DQS-berechnen (Subsampling?) // erst nur im selben scan suchen und anschließend die mit gutem DQS priorisieren
mittlere innendistanz optimieren
 
 Sortiere Featureliste nur im Bereich von scans, dann suche jeweils nächstes mz 

überspringe n Werte pro suchvorgang
1. Relativ viele Suchvorgänge in einem Scan brauchen 0-1 Iterationen - 4399 von > 7^6 -> nicht relevant, insbesodere da im Rasterfall nur 4k zusätzliche Operationen hinzukommen
2. Im Schnitt 147 Schritte

doubles -> floats

prüfen, wie das Programm skaliert -> subdatensätze
reduce nutzen?

Mehrere Datenstrukturen sind nicht-exklusiv 
Die Featureliste eines Bins ist bereits eine andere Datenstruktur als die Featureliste, die anfangs erstellt wurde

Auf alle Bins sind die einzelnen mz eher nebensächlich - jeder Bin wird primär über eine Masse und den Bereich der Scans, den er abdeckt, definiert